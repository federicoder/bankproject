number of rows, number of columns 
(10000, 14)
checking column list and missing values:
RowNumber          0
CustomerId         0
Surname            0
CreditScore        0
Geography          0
Gender             0
Age                0
Tenure             0
Balance            0
NumOfProducts      0
HasCrCard          0
IsActiveMember     0
EstimatedSalary    0
Exited             0
dtype: int64
Get unique count for each variable:
RowNumber          10000
CustomerId         10000
Surname             2932
CreditScore          460
Geography              3
Gender                 2
Age                   70
Tenure                11
Balance             6382
NumOfProducts          4
HasCrCard              2
IsActiveMember         2
EstimatedSalary     9999
Exited                 2
dtype: int64
Get duplicated data:
Empty DataFrame
Columns: [RowNumber, CustomerId, Surname, CreditScore, Geography, Gender, Age, Tenure, Balance, NumOfProducts, HasCrCard, IsActiveMember, EstimatedSalary, Exited]
Index: []
                 RowNumber  CustomerId  ...  EstimatedSalary    Exited
RowNumber         1.000000    0.004202  ...        -0.005988 -0.016571
CustomerId        0.004202    1.000000  ...         0.015271 -0.006248
CreditScore       0.005840    0.005308  ...        -0.001384 -0.027094
Age               0.000783    0.009497  ...        -0.007201  0.285323
Tenure           -0.006495   -0.014883  ...         0.007784 -0.014001
Balance          -0.009067   -0.012419  ...         0.012797  0.118533
NumOfProducts     0.007246    0.016972  ...         0.014204 -0.047820
HasCrCard         0.000599   -0.014025  ...        -0.009933 -0.007138
IsActiveMember    0.012044    0.001665  ...        -0.011421 -0.156128
EstimatedSalary  -0.005988    0.015271  ...         1.000000  0.012097
Exited           -0.016571   -0.006248  ...         0.012097  1.000000

[11 rows x 11 columns]
   CreditScore Geography  Gender  ...  IsActiveMember  EstimatedSalary  Exited
0          619    France  Female  ...               1           101348       1
1          608     Spain  Female  ...               1           112542       0
2          502    France  Female  ...               0           113931       1
3          699    France  Female  ...               0            93826       0
4          850     Spain  Female  ...               1            79084       0

[5 rows x 11 columns]
CreditScore         int64
Geography          object
Gender             object
Age                 int64
Tenure              int64
Balance             int64
NumOfProducts       int64
HasCrCard           int64
IsActiveMember      int64
EstimatedSalary     int64
Exited              int64
dtype: object
detecting outliers:

8000
2000
      CreditScore Geography  ... TenureByAge  CreditScoreGivenAge
8159          461     Spain  ...    0.240000            18.440000
6332          619    France  ...    0.114286            17.685714
8895          699    France  ...    0.200000            17.475000
5351          558   Germany  ...    0.048780            13.609756
4314          638    France  ...    0.147059            18.764706
...           ...       ...  ...         ...                  ...
7554          706     Spain  ...    0.200000            23.533333
3077          587   Germany  ...    0.181818            17.787879
1898          850   Germany  ...    0.111111            18.888889
5046          793     Spain  ...    0.120000            31.720000
9445          689     Spain  ...    0.178571            24.607143

[8000 rows x 14 columns]
Min-Max normalization:

      Exited  CreditScore  ...  Gender_Female  Gender_Male
8159       0        0.222  ...              1           -1
6332       0        0.538  ...              1           -1
8895       0        0.698  ...              1           -1
5351       0        0.416  ...             -1            1
4314       0        0.576  ...             -1            1

[5 rows x 17 columns]
hyperparameter tuning for logistic regression:

Best score of model:
0.8150000000000001 

Best params of model:
{'C': 50, 'fit_intercept': True, 'intercept_scaling': 1, 'max_iter': 250, 'penalty': 'l2', 'tol': 1e-05} 

Best estimator of model:
LogisticRegression(C=50, max_iter=250, tol=1e-05) 

hyperparameter tuning for SVM:

Best score of model:
0.8519997453431599 

Best params of model:
{'C': 100, 'gamma': 0.1, 'kernel': 'rbf', 'probability': True} 

Best estimator of model:
SVC(C=100, gamma=0.1, probability=True) 

Fit Decision Tree Classifier with max depth 8 setted:

Fitting 5 folds for each of 4 candidates, totalling 20 fits
[CV 1/5] END .....criterion=gini, splitter=best;, score=0.835 total time=   0.0s
[CV 2/5] END .....criterion=gini, splitter=best;, score=0.854 total time=   0.0s
[CV 3/5] END .....criterion=gini, splitter=best;, score=0.859 total time=   0.0s
[CV 4/5] END .....criterion=gini, splitter=best;, score=0.862 total time=   0.0s
[CV 5/5] END .....criterion=gini, splitter=best;, score=0.849 total time=   0.0s
[CV 1/5] END ...criterion=gini, splitter=random;, score=0.828 total time=   0.0s
[CV 2/5] END ...criterion=gini, splitter=random;, score=0.855 total time=   0.0s
[CV 3/5] END ...criterion=gini, splitter=random;, score=0.853 total time=   0.0s
[CV 4/5] END ...criterion=gini, splitter=random;, score=0.847 total time=   0.0s
[CV 5/5] END ...criterion=gini, splitter=random;, score=0.843 total time=   0.0s
[CV 1/5] END ..criterion=entropy, splitter=best;, score=0.835 total time=   0.0s
[CV 2/5] END ..criterion=entropy, splitter=best;, score=0.850 total time=   0.0s
[CV 3/5] END ..criterion=entropy, splitter=best;, score=0.861 total time=   0.0s
[CV 4/5] END ..criterion=entropy, splitter=best;, score=0.855 total time=   0.0s
[CV 5/5] END ..criterion=entropy, splitter=best;, score=0.846 total time=   0.0s
[CV 1/5] END criterion=entropy, splitter=random;, score=0.827 total time=   0.0s
[CV 2/5] END criterion=entropy, splitter=random;, score=0.855 total time=   0.0s
[CV 3/5] END criterion=entropy, splitter=random;, score=0.852 total time=   0.0s
[CV 4/5] END criterion=entropy, splitter=random;, score=0.844 total time=   0.0s
[CV 5/5] END criterion=entropy, splitter=random;, score=0.835 total time=   0.0s
hyperparameter tuning for Decision Tree:

Best score of model:
0.851625 

Best params of model:
{'criterion': 'gini', 'splitter': 'best'} 

Best estimator of model:
DecisionTreeClassifier(max_depth=8, random_state=42) 

Fitting 5 folds for each of 80 candidates, totalling 400 fits
[CV 1/5] END algorithm=auto, n_neighbors=1, p=1, weights=uniform;, score=0.793 total time=   0.1s
[CV 2/5] END algorithm=auto, n_neighbors=1, p=1, weights=uniform;, score=0.794 total time=   0.1s
[CV 3/5] END algorithm=auto, n_neighbors=1, p=1, weights=uniform;, score=0.794 total time=   0.1s
[CV 4/5] END algorithm=auto, n_neighbors=1, p=1, weights=uniform;, score=0.778 total time=   0.1s
[CV 5/5] END algorithm=auto, n_neighbors=1, p=1, weights=uniform;, score=0.794 total time=   0.1s
[CV 1/5] END algorithm=auto, n_neighbors=1, p=1, weights=distance;, score=0.793 total time=   0.1s
[CV 2/5] END algorithm=auto, n_neighbors=1, p=1, weights=distance;, score=0.794 total time=   0.1s
[CV 3/5] END algorithm=auto, n_neighbors=1, p=1, weights=distance;, score=0.794 total time=   0.1s
[CV 4/5] END algorithm=auto, n_neighbors=1, p=1, weights=distance;, score=0.778 total time=   0.1s
[CV 5/5] END algorithm=auto, n_neighbors=1, p=1, weights=distance;, score=0.794 total time=   0.1s
[CV 1/5] END algorithm=auto, n_neighbors=1, p=2, weights=uniform;, score=0.789 total time=   0.1s
[CV 2/5] END algorithm=auto, n_neighbors=1, p=2, weights=uniform;, score=0.776 total time=   0.1s
[CV 3/5] END algorithm=auto, n_neighbors=1, p=2, weights=uniform;, score=0.786 total time=   0.1s
[CV 4/5] END algorithm=auto, n_neighbors=1, p=2, weights=uniform;, score=0.787 total time=   0.1s
[CV 5/5] END algorithm=auto, n_neighbors=1, p=2, weights=uniform;, score=0.794 total time=   0.1s
[CV 1/5] END algorithm=auto, n_neighbors=1, p=2, weights=distance;, score=0.789 total time=   0.0s
[CV 2/5] END algorithm=auto, n_neighbors=1, p=2, weights=distance;, score=0.776 total time=   0.0s
[CV 3/5] END algorithm=auto, n_neighbors=1, p=2, weights=distance;, score=0.786 total time=   0.0s
[CV 4/5] END algorithm=auto, n_neighbors=1, p=2, weights=distance;, score=0.787 total time=   0.0s
[CV 5/5] END algorithm=auto, n_neighbors=1, p=2, weights=distance;, score=0.794 total time=   0.0s
[CV 1/5] END algorithm=auto, n_neighbors=2, p=1, weights=uniform;, score=0.815 total time=   0.1s
[CV 2/5] END algorithm=auto, n_neighbors=2, p=1, weights=uniform;, score=0.813 total time=   0.1s
[CV 3/5] END algorithm=auto, n_neighbors=2, p=1, weights=uniform;, score=0.820 total time=   0.1s
[CV 4/5] END algorithm=auto, n_neighbors=2, p=1, weights=uniform;, score=0.811 total time=   0.1s
[CV 5/5] END algorithm=auto, n_neighbors=2, p=1, weights=uniform;, score=0.819 total time=   0.1s
[CV 1/5] END algorithm=auto, n_neighbors=2, p=1, weights=distance;, score=0.793 total time=   0.1s
[CV 2/5] END algorithm=auto, n_neighbors=2, p=1, weights=distance;, score=0.794 total time=   0.1s
[CV 3/5] END algorithm=auto, n_neighbors=2, p=1, weights=distance;, score=0.794 total time=   0.1s
[CV 4/5] END algorithm=auto, n_neighbors=2, p=1, weights=distance;, score=0.778 total time=   0.1s
[CV 5/5] END algorithm=auto, n_neighbors=2, p=1, weights=distance;, score=0.794 total time=   0.1s
[CV 1/5] END algorithm=auto, n_neighbors=2, p=2, weights=uniform;, score=0.814 total time=   0.1s
[CV 2/5] END algorithm=auto, n_neighbors=2, p=2, weights=uniform;, score=0.818 total time=   0.1s
[CV 3/5] END algorithm=auto, n_neighbors=2, p=2, weights=uniform;, score=0.819 total time=   0.1s
[CV 4/5] END algorithm=auto, n_neighbors=2, p=2, weights=uniform;, score=0.811 total time=   0.1s
[CV 5/5] END algorithm=auto, n_neighbors=2, p=2, weights=uniform;, score=0.811 total time=   0.1s
[CV 1/5] END algorithm=auto, n_neighbors=2, p=2, weights=distance;, score=0.789 total time=   0.0s
[CV 2/5] END algorithm=auto, n_neighbors=2, p=2, weights=distance;, score=0.776 total time=   0.0s
[CV 3/5] END algorithm=auto, n_neighbors=2, p=2, weights=distance;, score=0.786 total time=   0.0s
[CV 4/5] END algorithm=auto, n_neighbors=2, p=2, weights=distance;, score=0.787 total time=   0.0s
[CV 5/5] END algorithm=auto, n_neighbors=2, p=2, weights=distance;, score=0.794 total time=   0.0s
[CV 1/5] END algorithm=auto, n_neighbors=3, p=1, weights=uniform;, score=0.814 total time=   0.1s
[CV 2/5] END algorithm=auto, n_neighbors=3, p=1, weights=uniform;, score=0.817 total time=   0.1s
[CV 3/5] END algorithm=auto, n_neighbors=3, p=1, weights=uniform;, score=0.818 total time=   0.1s
[CV 4/5] END algorithm=auto, n_neighbors=3, p=1, weights=uniform;, score=0.821 total time=   0.1s
[CV 5/5] END algorithm=auto, n_neighbors=3, p=1, weights=uniform;, score=0.819 total time=   0.1s
[CV 1/5] END algorithm=auto, n_neighbors=3, p=1, weights=distance;, score=0.809 total time=   0.1s
[CV 2/5] END algorithm=auto, n_neighbors=3, p=1, weights=distance;, score=0.816 total time=   0.1s
[CV 3/5] END algorithm=auto, n_neighbors=3, p=1, weights=distance;, score=0.814 total time=   0.1s
[CV 4/5] END algorithm=auto, n_neighbors=3, p=1, weights=distance;, score=0.819 total time=   0.1s
[CV 5/5] END algorithm=auto, n_neighbors=3, p=1, weights=distance;, score=0.814 total time=   0.1s
[CV 1/5] END algorithm=auto, n_neighbors=3, p=2, weights=uniform;, score=0.806 total time=   0.1s
[CV 2/5] END algorithm=auto, n_neighbors=3, p=2, weights=uniform;, score=0.812 total time=   0.1s
[CV 3/5] END algorithm=auto, n_neighbors=3, p=2, weights=uniform;, score=0.814 total time=   0.1s
[CV 4/5] END algorithm=auto, n_neighbors=3, p=2, weights=uniform;, score=0.819 total time=   0.1s
[CV 5/5] END algorithm=auto, n_neighbors=3, p=2, weights=uniform;, score=0.812 total time=   0.1s
[CV 1/5] END algorithm=auto, n_neighbors=3, p=2, weights=distance;, score=0.802 total time=   0.0s
[CV 2/5] END algorithm=auto, n_neighbors=3, p=2, weights=distance;, score=0.812 total time=   0.0s
[CV 3/5] END algorithm=auto, n_neighbors=3, p=2, weights=distance;, score=0.812 total time=   0.0s
[CV 4/5] END algorithm=auto, n_neighbors=3, p=2, weights=distance;, score=0.818 total time=   0.0s
[CV 5/5] END algorithm=auto, n_neighbors=3, p=2, weights=distance;, score=0.809 total time=   0.0s
[CV 1/5] END algorithm=auto, n_neighbors=4, p=1, weights=uniform;, score=0.818 total time=   0.1s
[CV 2/5] END algorithm=auto, n_neighbors=4, p=1, weights=uniform;, score=0.820 total time=   0.1s
[CV 3/5] END algorithm=auto, n_neighbors=4, p=1, weights=uniform;, score=0.819 total time=   0.1s
[CV 4/5] END algorithm=auto, n_neighbors=4, p=1, weights=uniform;, score=0.818 total time=   0.1s
[CV 5/5] END algorithm=auto, n_neighbors=4, p=1, weights=uniform;, score=0.818 total time=   0.1s
[CV 1/5] END algorithm=auto, n_neighbors=4, p=1, weights=distance;, score=0.817 total time=   0.1s
[CV 2/5] END algorithm=auto, n_neighbors=4, p=1, weights=distance;, score=0.823 total time=   0.1s
[CV 3/5] END algorithm=auto, n_neighbors=4, p=1, weights=distance;, score=0.813 total time=   0.1s
[CV 4/5] END algorithm=auto, n_neighbors=4, p=1, weights=distance;, score=0.817 total time=   0.1s
[CV 5/5] END algorithm=auto, n_neighbors=4, p=1, weights=distance;, score=0.815 total time=   0.1s
[CV 1/5] END algorithm=auto, n_neighbors=4, p=2, weights=uniform;, score=0.816 total time=   0.1s
[CV 2/5] END algorithm=auto, n_neighbors=4, p=2, weights=uniform;, score=0.819 total time=   0.1s
[CV 3/5] END algorithm=auto, n_neighbors=4, p=2, weights=uniform;, score=0.824 total time=   0.1s
[CV 4/5] END algorithm=auto, n_neighbors=4, p=2, weights=uniform;, score=0.815 total time=   0.1s
[CV 5/5] END algorithm=auto, n_neighbors=4, p=2, weights=uniform;, score=0.812 total time=   0.1s
[CV 1/5] END algorithm=auto, n_neighbors=4, p=2, weights=distance;, score=0.808 total time=   0.0s
[CV 2/5] END algorithm=auto, n_neighbors=4, p=2, weights=distance;, score=0.809 total time=   0.0s
[CV 3/5] END algorithm=auto, n_neighbors=4, p=2, weights=distance;, score=0.823 total time=   0.0s
[CV 4/5] END algorithm=auto, n_neighbors=4, p=2, weights=distance;, score=0.817 total time=   0.0s
[CV 5/5] END algorithm=auto, n_neighbors=4, p=2, weights=distance;, score=0.808 total time=   0.0s
[CV 1/5] END algorithm=auto, n_neighbors=5, p=1, weights=uniform;, score=0.816 total time=   0.1s
[CV 2/5] END algorithm=auto, n_neighbors=5, p=1, weights=uniform;, score=0.831 total time=   0.1s
[CV 3/5] END algorithm=auto, n_neighbors=5, p=1, weights=uniform;, score=0.827 total time=   0.1s
[CV 4/5] END algorithm=auto, n_neighbors=5, p=1, weights=uniform;, score=0.819 total time=   0.1s
[CV 5/5] END algorithm=auto, n_neighbors=5, p=1, weights=uniform;, score=0.821 total time=   0.1s
[CV 1/5] END algorithm=auto, n_neighbors=5, p=1, weights=distance;, score=0.817 total time=   0.1s
[CV 2/5] END algorithm=auto, n_neighbors=5, p=1, weights=distance;, score=0.831 total time=   0.1s
[CV 3/5] END algorithm=auto, n_neighbors=5, p=1, weights=distance;, score=0.824 total time=   0.1s
[CV 4/5] END algorithm=auto, n_neighbors=5, p=1, weights=distance;, score=0.824 total time=   0.1s
[CV 5/5] END algorithm=auto, n_neighbors=5, p=1, weights=distance;, score=0.822 total time=   0.1s
[CV 1/5] END algorithm=auto, n_neighbors=5, p=2, weights=uniform;, score=0.810 total time=   0.1s
[CV 2/5] END algorithm=auto, n_neighbors=5, p=2, weights=uniform;, score=0.817 total time=   0.1s
[CV 3/5] END algorithm=auto, n_neighbors=5, p=2, weights=uniform;, score=0.824 total time=   0.1s
[CV 4/5] END algorithm=auto, n_neighbors=5, p=2, weights=uniform;, score=0.818 total time=   0.1s
[CV 5/5] END algorithm=auto, n_neighbors=5, p=2, weights=uniform;, score=0.811 total time=   0.1s
[CV 1/5] END algorithm=auto, n_neighbors=5, p=2, weights=distance;, score=0.811 total time=   0.0s
[CV 2/5] END algorithm=auto, n_neighbors=5, p=2, weights=distance;, score=0.816 total time=   0.0s
[CV 3/5] END algorithm=auto, n_neighbors=5, p=2, weights=distance;, score=0.822 total time=   0.0s
[CV 4/5] END algorithm=auto, n_neighbors=5, p=2, weights=distance;, score=0.821 total time=   0.0s
[CV 5/5] END algorithm=auto, n_neighbors=5, p=2, weights=distance;, score=0.807 total time=   0.0s
[CV 1/5] END algorithm=ball_tree, n_neighbors=1, p=1, weights=uniform;, score=0.793 total time=   0.1s
[CV 2/5] END algorithm=ball_tree, n_neighbors=1, p=1, weights=uniform;, score=0.794 total time=   0.1s
[CV 3/5] END algorithm=ball_tree, n_neighbors=1, p=1, weights=uniform;, score=0.794 total time=   0.1s
[CV 4/5] END algorithm=ball_tree, n_neighbors=1, p=1, weights=uniform;, score=0.778 total time=   0.1s
[CV 5/5] END algorithm=ball_tree, n_neighbors=1, p=1, weights=uniform;, score=0.794 total time=   0.1s
[CV 1/5] END algorithm=ball_tree, n_neighbors=1, p=1, weights=distance;, score=0.793 total time=   0.1s
[CV 2/5] END algorithm=ball_tree, n_neighbors=1, p=1, weights=distance;, score=0.794 total time=   0.1s
[CV 3/5] END algorithm=ball_tree, n_neighbors=1, p=1, weights=distance;, score=0.794 total time=   0.1s
[CV 4/5] END algorithm=ball_tree, n_neighbors=1, p=1, weights=distance;, score=0.778 total time=   0.1s
[CV 5/5] END algorithm=ball_tree, n_neighbors=1, p=1, weights=distance;, score=0.794 total time=   0.1s
[CV 1/5] END algorithm=ball_tree, n_neighbors=1, p=2, weights=uniform;, score=0.789 total time=   0.1s
[CV 2/5] END algorithm=ball_tree, n_neighbors=1, p=2, weights=uniform;, score=0.776 total time=   0.1s
[CV 3/5] END algorithm=ball_tree, n_neighbors=1, p=2, weights=uniform;, score=0.786 total time=   0.1s
[CV 4/5] END algorithm=ball_tree, n_neighbors=1, p=2, weights=uniform;, score=0.787 total time=   0.1s
[CV 5/5] END algorithm=ball_tree, n_neighbors=1, p=2, weights=uniform;, score=0.794 total time=   0.1s
[CV 1/5] END algorithm=ball_tree, n_neighbors=1, p=2, weights=distance;, score=0.789 total time=   0.0s
[CV 2/5] END algorithm=ball_tree, n_neighbors=1, p=2, weights=distance;, score=0.776 total time=   0.0s
[CV 3/5] END algorithm=ball_tree, n_neighbors=1, p=2, weights=distance;, score=0.786 total time=   0.0s
[CV 4/5] END algorithm=ball_tree, n_neighbors=1, p=2, weights=distance;, score=0.787 total time=   0.0s
[CV 5/5] END algorithm=ball_tree, n_neighbors=1, p=2, weights=distance;, score=0.794 total time=   0.0s
[CV 1/5] END algorithm=ball_tree, n_neighbors=2, p=1, weights=uniform;, score=0.815 total time=   0.1s
[CV 2/5] END algorithm=ball_tree, n_neighbors=2, p=1, weights=uniform;, score=0.813 total time=   0.1s
[CV 3/5] END algorithm=ball_tree, n_neighbors=2, p=1, weights=uniform;, score=0.820 total time=   0.1s
[CV 4/5] END algorithm=ball_tree, n_neighbors=2, p=1, weights=uniform;, score=0.811 total time=   0.1s
[CV 5/5] END algorithm=ball_tree, n_neighbors=2, p=1, weights=uniform;, score=0.819 total time=   0.1s
[CV 1/5] END algorithm=ball_tree, n_neighbors=2, p=1, weights=distance;, score=0.793 total time=   0.1s
[CV 2/5] END algorithm=ball_tree, n_neighbors=2, p=1, weights=distance;, score=0.794 total time=   0.1s
[CV 3/5] END algorithm=ball_tree, n_neighbors=2, p=1, weights=distance;, score=0.794 total time=   0.1s
[CV 4/5] END algorithm=ball_tree, n_neighbors=2, p=1, weights=distance;, score=0.778 total time=   0.1s
[CV 5/5] END algorithm=ball_tree, n_neighbors=2, p=1, weights=distance;, score=0.794 total time=   0.1s
[CV 1/5] END algorithm=ball_tree, n_neighbors=2, p=2, weights=uniform;, score=0.814 total time=   0.1s
[CV 2/5] END algorithm=ball_tree, n_neighbors=2, p=2, weights=uniform;, score=0.818 total time=   0.1s
[CV 3/5] END algorithm=ball_tree, n_neighbors=2, p=2, weights=uniform;, score=0.819 total time=   0.1s
[CV 4/5] END algorithm=ball_tree, n_neighbors=2, p=2, weights=uniform;, score=0.811 total time=   0.1s
[CV 5/5] END algorithm=ball_tree, n_neighbors=2, p=2, weights=uniform;, score=0.811 total time=   0.1s
[CV 1/5] END algorithm=ball_tree, n_neighbors=2, p=2, weights=distance;, score=0.789 total time=   0.0s
[CV 2/5] END algorithm=ball_tree, n_neighbors=2, p=2, weights=distance;, score=0.776 total time=   0.1s
[CV 3/5] END algorithm=ball_tree, n_neighbors=2, p=2, weights=distance;, score=0.786 total time=   0.0s
[CV 4/5] END algorithm=ball_tree, n_neighbors=2, p=2, weights=distance;, score=0.787 total time=   0.1s
[CV 5/5] END algorithm=ball_tree, n_neighbors=2, p=2, weights=distance;, score=0.794 total time=   0.0s
[CV 1/5] END algorithm=ball_tree, n_neighbors=3, p=1, weights=uniform;, score=0.814 total time=   0.1s
[CV 2/5] END algorithm=ball_tree, n_neighbors=3, p=1, weights=uniform;, score=0.817 total time=   0.1s
[CV 3/5] END algorithm=ball_tree, n_neighbors=3, p=1, weights=uniform;, score=0.818 total time=   0.1s
[CV 4/5] END algorithm=ball_tree, n_neighbors=3, p=1, weights=uniform;, score=0.821 total time=   0.1s
[CV 5/5] END algorithm=ball_tree, n_neighbors=3, p=1, weights=uniform;, score=0.819 total time=   0.1s
[CV 1/5] END algorithm=ball_tree, n_neighbors=3, p=1, weights=distance;, score=0.809 total time=   0.1s
[CV 2/5] END algorithm=ball_tree, n_neighbors=3, p=1, weights=distance;, score=0.816 total time=   0.1s
[CV 3/5] END algorithm=ball_tree, n_neighbors=3, p=1, weights=distance;, score=0.814 total time=   0.1s
[CV 4/5] END algorithm=ball_tree, n_neighbors=3, p=1, weights=distance;, score=0.819 total time=   0.1s
[CV 5/5] END algorithm=ball_tree, n_neighbors=3, p=1, weights=distance;, score=0.814 total time=   0.1s
[CV 1/5] END algorithm=ball_tree, n_neighbors=3, p=2, weights=uniform;, score=0.806 total time=   0.1s
[CV 2/5] END algorithm=ball_tree, n_neighbors=3, p=2, weights=uniform;, score=0.812 total time=   0.1s
[CV 3/5] END algorithm=ball_tree, n_neighbors=3, p=2, weights=uniform;, score=0.814 total time=   0.1s
[CV 4/5] END algorithm=ball_tree, n_neighbors=3, p=2, weights=uniform;, score=0.819 total time=   0.1s
[CV 5/5] END algorithm=ball_tree, n_neighbors=3, p=2, weights=uniform;, score=0.812 total time=   0.1s
[CV 1/5] END algorithm=ball_tree, n_neighbors=3, p=2, weights=distance;, score=0.802 total time=   0.1s
[CV 2/5] END algorithm=ball_tree, n_neighbors=3, p=2, weights=distance;, score=0.812 total time=   0.1s
[CV 3/5] END algorithm=ball_tree, n_neighbors=3, p=2, weights=distance;, score=0.812 total time=   0.0s
[CV 4/5] END algorithm=ball_tree, n_neighbors=3, p=2, weights=distance;, score=0.818 total time=   0.1s
[CV 5/5] END algorithm=ball_tree, n_neighbors=3, p=2, weights=distance;, score=0.809 total time=   0.0s
[CV 1/5] END algorithm=ball_tree, n_neighbors=4, p=1, weights=uniform;, score=0.818 total time=   0.1s
[CV 2/5] END algorithm=ball_tree, n_neighbors=4, p=1, weights=uniform;, score=0.820 total time=   0.1s
[CV 3/5] END algorithm=ball_tree, n_neighbors=4, p=1, weights=uniform;, score=0.819 total time=   0.1s
[CV 4/5] END algorithm=ball_tree, n_neighbors=4, p=1, weights=uniform;, score=0.818 total time=   0.1s
[CV 5/5] END algorithm=ball_tree, n_neighbors=4, p=1, weights=uniform;, score=0.818 total time=   0.1s
[CV 1/5] END algorithm=ball_tree, n_neighbors=4, p=1, weights=distance;, score=0.817 total time=   0.1s
[CV 2/5] END algorithm=ball_tree, n_neighbors=4, p=1, weights=distance;, score=0.823 total time=   0.1s
[CV 3/5] END algorithm=ball_tree, n_neighbors=4, p=1, weights=distance;, score=0.813 total time=   0.1s
[CV 4/5] END algorithm=ball_tree, n_neighbors=4, p=1, weights=distance;, score=0.817 total time=   0.1s
[CV 5/5] END algorithm=ball_tree, n_neighbors=4, p=1, weights=distance;, score=0.815 total time=   0.1s
[CV 1/5] END algorithm=ball_tree, n_neighbors=4, p=2, weights=uniform;, score=0.816 total time=   0.1s
[CV 2/5] END algorithm=ball_tree, n_neighbors=4, p=2, weights=uniform;, score=0.819 total time=   0.1s
[CV 3/5] END algorithm=ball_tree, n_neighbors=4, p=2, weights=uniform;, score=0.824 total time=   0.1s
[CV 4/5] END algorithm=ball_tree, n_neighbors=4, p=2, weights=uniform;, score=0.815 total time=   0.1s
[CV 5/5] END algorithm=ball_tree, n_neighbors=4, p=2, weights=uniform;, score=0.812 total time=   0.1s
[CV 1/5] END algorithm=ball_tree, n_neighbors=4, p=2, weights=distance;, score=0.808 total time=   0.1s
[CV 2/5] END algorithm=ball_tree, n_neighbors=4, p=2, weights=distance;, score=0.809 total time=   0.1s
[CV 3/5] END algorithm=ball_tree, n_neighbors=4, p=2, weights=distance;, score=0.823 total time=   0.1s
[CV 4/5] END algorithm=ball_tree, n_neighbors=4, p=2, weights=distance;, score=0.817 total time=   0.1s
[CV 5/5] END algorithm=ball_tree, n_neighbors=4, p=2, weights=distance;, score=0.808 total time=   0.1s
[CV 1/5] END algorithm=ball_tree, n_neighbors=5, p=1, weights=uniform;, score=0.816 total time=   0.1s
[CV 2/5] END algorithm=ball_tree, n_neighbors=5, p=1, weights=uniform;, score=0.831 total time=   0.1s
[CV 3/5] END algorithm=ball_tree, n_neighbors=5, p=1, weights=uniform;, score=0.827 total time=   0.1s
[CV 4/5] END algorithm=ball_tree, n_neighbors=5, p=1, weights=uniform;, score=0.819 total time=   0.1s
[CV 5/5] END algorithm=ball_tree, n_neighbors=5, p=1, weights=uniform;, score=0.821 total time=   0.1s
[CV 1/5] END algorithm=ball_tree, n_neighbors=5, p=1, weights=distance;, score=0.817 total time=   0.1s
[CV 2/5] END algorithm=ball_tree, n_neighbors=5, p=1, weights=distance;, score=0.831 total time=   0.1s
[CV 3/5] END algorithm=ball_tree, n_neighbors=5, p=1, weights=distance;, score=0.824 total time=   0.1s
[CV 4/5] END algorithm=ball_tree, n_neighbors=5, p=1, weights=distance;, score=0.824 total time=   0.1s
[CV 5/5] END algorithm=ball_tree, n_neighbors=5, p=1, weights=distance;, score=0.822 total time=   0.1s
[CV 1/5] END algorithm=ball_tree, n_neighbors=5, p=2, weights=uniform;, score=0.810 total time=   0.1s
[CV 2/5] END algorithm=ball_tree, n_neighbors=5, p=2, weights=uniform;, score=0.817 total time=   0.1s
[CV 3/5] END algorithm=ball_tree, n_neighbors=5, p=2, weights=uniform;, score=0.824 total time=   0.1s
[CV 4/5] END algorithm=ball_tree, n_neighbors=5, p=2, weights=uniform;, score=0.818 total time=   0.1s
[CV 5/5] END algorithm=ball_tree, n_neighbors=5, p=2, weights=uniform;, score=0.811 total time=   0.1s
[CV 1/5] END algorithm=ball_tree, n_neighbors=5, p=2, weights=distance;, score=0.811 total time=   0.1s
[CV 2/5] END algorithm=ball_tree, n_neighbors=5, p=2, weights=distance;, score=0.816 total time=   0.1s
[CV 3/5] END algorithm=ball_tree, n_neighbors=5, p=2, weights=distance;, score=0.822 total time=   0.1s
[CV 4/5] END algorithm=ball_tree, n_neighbors=5, p=2, weights=distance;, score=0.821 total time=   0.1s
[CV 5/5] END algorithm=ball_tree, n_neighbors=5, p=2, weights=distance;, score=0.807 total time=   0.1s
[CV 1/5] END algorithm=kd_tree, n_neighbors=1, p=1, weights=uniform;, score=0.793 total time=   0.1s
[CV 2/5] END algorithm=kd_tree, n_neighbors=1, p=1, weights=uniform;, score=0.794 total time=   0.1s
[CV 3/5] END algorithm=kd_tree, n_neighbors=1, p=1, weights=uniform;, score=0.794 total time=   0.1s
[CV 4/5] END algorithm=kd_tree, n_neighbors=1, p=1, weights=uniform;, score=0.778 total time=   0.1s
[CV 5/5] END algorithm=kd_tree, n_neighbors=1, p=1, weights=uniform;, score=0.794 total time=   0.1s
[CV 1/5] END algorithm=kd_tree, n_neighbors=1, p=1, weights=distance;, score=0.793 total time=   0.1s
[CV 2/5] END algorithm=kd_tree, n_neighbors=1, p=1, weights=distance;, score=0.794 total time=   0.1s
[CV 3/5] END algorithm=kd_tree, n_neighbors=1, p=1, weights=distance;, score=0.794 total time=   0.1s
[CV 4/5] END algorithm=kd_tree, n_neighbors=1, p=1, weights=distance;, score=0.778 total time=   0.1s
[CV 5/5] END algorithm=kd_tree, n_neighbors=1, p=1, weights=distance;, score=0.794 total time=   0.1s
[CV 1/5] END algorithm=kd_tree, n_neighbors=1, p=2, weights=uniform;, score=0.789 total time=   0.1s
[CV 2/5] END algorithm=kd_tree, n_neighbors=1, p=2, weights=uniform;, score=0.776 total time=   0.1s
[CV 3/5] END algorithm=kd_tree, n_neighbors=1, p=2, weights=uniform;, score=0.786 total time=   0.1s
[CV 4/5] END algorithm=kd_tree, n_neighbors=1, p=2, weights=uniform;, score=0.787 total time=   0.1s
[CV 5/5] END algorithm=kd_tree, n_neighbors=1, p=2, weights=uniform;, score=0.794 total time=   0.1s
[CV 1/5] END algorithm=kd_tree, n_neighbors=1, p=2, weights=distance;, score=0.789 total time=   0.1s
[CV 2/5] END algorithm=kd_tree, n_neighbors=1, p=2, weights=distance;, score=0.776 total time=   0.1s
[CV 3/5] END algorithm=kd_tree, n_neighbors=1, p=2, weights=distance;, score=0.786 total time=   0.1s
[CV 4/5] END algorithm=kd_tree, n_neighbors=1, p=2, weights=distance;, score=0.787 total time=   0.1s
[CV 5/5] END algorithm=kd_tree, n_neighbors=1, p=2, weights=distance;, score=0.794 total time=   0.1s
[CV 1/5] END algorithm=kd_tree, n_neighbors=2, p=1, weights=uniform;, score=0.815 total time=   0.1s
[CV 2/5] END algorithm=kd_tree, n_neighbors=2, p=1, weights=uniform;, score=0.813 total time=   0.1s
[CV 3/5] END algorithm=kd_tree, n_neighbors=2, p=1, weights=uniform;, score=0.820 total time=   0.1s
[CV 4/5] END algorithm=kd_tree, n_neighbors=2, p=1, weights=uniform;, score=0.811 total time=   0.1s
[CV 5/5] END algorithm=kd_tree, n_neighbors=2, p=1, weights=uniform;, score=0.819 total time=   0.1s
[CV 1/5] END algorithm=kd_tree, n_neighbors=2, p=1, weights=distance;, score=0.793 total time=   0.1s
[CV 2/5] END algorithm=kd_tree, n_neighbors=2, p=1, weights=distance;, score=0.794 total time=   0.1s
[CV 3/5] END algorithm=kd_tree, n_neighbors=2, p=1, weights=distance;, score=0.794 total time=   0.1s
[CV 4/5] END algorithm=kd_tree, n_neighbors=2, p=1, weights=distance;, score=0.778 total time=   0.1s
[CV 5/5] END algorithm=kd_tree, n_neighbors=2, p=1, weights=distance;, score=0.794 total time=   0.1s
[CV 1/5] END algorithm=kd_tree, n_neighbors=2, p=2, weights=uniform;, score=0.814 total time=   0.1s
[CV 2/5] END algorithm=kd_tree, n_neighbors=2, p=2, weights=uniform;, score=0.818 total time=   0.1s
[CV 3/5] END algorithm=kd_tree, n_neighbors=2, p=2, weights=uniform;, score=0.819 total time=   0.1s
[CV 4/5] END algorithm=kd_tree, n_neighbors=2, p=2, weights=uniform;, score=0.811 total time=   0.1s
[CV 5/5] END algorithm=kd_tree, n_neighbors=2, p=2, weights=uniform;, score=0.811 total time=   0.1s
[CV 1/5] END algorithm=kd_tree, n_neighbors=2, p=2, weights=distance;, score=0.789 total time=   0.1s
[CV 2/5] END algorithm=kd_tree, n_neighbors=2, p=2, weights=distance;, score=0.776 total time=   0.1s
[CV 3/5] END algorithm=kd_tree, n_neighbors=2, p=2, weights=distance;, score=0.786 total time=   0.1s
[CV 4/5] END algorithm=kd_tree, n_neighbors=2, p=2, weights=distance;, score=0.787 total time=   0.1s
[CV 5/5] END algorithm=kd_tree, n_neighbors=2, p=2, weights=distance;, score=0.794 total time=   0.1s
[CV 1/5] END algorithm=kd_tree, n_neighbors=3, p=1, weights=uniform;, score=0.814 total time=   0.1s
[CV 2/5] END algorithm=kd_tree, n_neighbors=3, p=1, weights=uniform;, score=0.817 total time=   0.1s
[CV 3/5] END algorithm=kd_tree, n_neighbors=3, p=1, weights=uniform;, score=0.818 total time=   0.1s
[CV 4/5] END algorithm=kd_tree, n_neighbors=3, p=1, weights=uniform;, score=0.821 total time=   0.1s
[CV 5/5] END algorithm=kd_tree, n_neighbors=3, p=1, weights=uniform;, score=0.819 total time=   0.1s
[CV 1/5] END algorithm=kd_tree, n_neighbors=3, p=1, weights=distance;, score=0.809 total time=   0.1s
[CV 2/5] END algorithm=kd_tree, n_neighbors=3, p=1, weights=distance;, score=0.816 total time=   0.1s
[CV 3/5] END algorithm=kd_tree, n_neighbors=3, p=1, weights=distance;, score=0.814 total time=   0.1s
[CV 4/5] END algorithm=kd_tree, n_neighbors=3, p=1, weights=distance;, score=0.819 total time=   0.1s
[CV 5/5] END algorithm=kd_tree, n_neighbors=3, p=1, weights=distance;, score=0.814 total time=   0.1s
[CV 1/5] END algorithm=kd_tree, n_neighbors=3, p=2, weights=uniform;, score=0.806 total time=   0.1s
[CV 2/5] END algorithm=kd_tree, n_neighbors=3, p=2, weights=uniform;, score=0.812 total time=   0.1s
[CV 3/5] END algorithm=kd_tree, n_neighbors=3, p=2, weights=uniform;, score=0.814 total time=   0.1s
[CV 4/5] END algorithm=kd_tree, n_neighbors=3, p=2, weights=uniform;, score=0.819 total time=   0.1s
[CV 5/5] END algorithm=kd_tree, n_neighbors=3, p=2, weights=uniform;, score=0.812 total time=   0.1s
[CV 1/5] END algorithm=kd_tree, n_neighbors=3, p=2, weights=distance;, score=0.802 total time=   0.1s
[CV 2/5] END algorithm=kd_tree, n_neighbors=3, p=2, weights=distance;, score=0.812 total time=   0.1s
[CV 3/5] END algorithm=kd_tree, n_neighbors=3, p=2, weights=distance;, score=0.812 total time=   0.1s
[CV 4/5] END algorithm=kd_tree, n_neighbors=3, p=2, weights=distance;, score=0.818 total time=   0.1s
[CV 5/5] END algorithm=kd_tree, n_neighbors=3, p=2, weights=distance;, score=0.809 total time=   0.1s
[CV 1/5] END algorithm=kd_tree, n_neighbors=4, p=1, weights=uniform;, score=0.818 total time=   0.1s
[CV 2/5] END algorithm=kd_tree, n_neighbors=4, p=1, weights=uniform;, score=0.820 total time=   0.1s
[CV 3/5] END algorithm=kd_tree, n_neighbors=4, p=1, weights=uniform;, score=0.819 total time=   0.1s
[CV 4/5] END algorithm=kd_tree, n_neighbors=4, p=1, weights=uniform;, score=0.818 total time=   0.1s
[CV 5/5] END algorithm=kd_tree, n_neighbors=4, p=1, weights=uniform;, score=0.818 total time=   0.1s
[CV 1/5] END algorithm=kd_tree, n_neighbors=4, p=1, weights=distance;, score=0.817 total time=   0.1s
[CV 2/5] END algorithm=kd_tree, n_neighbors=4, p=1, weights=distance;, score=0.823 total time=   0.1s
[CV 3/5] END algorithm=kd_tree, n_neighbors=4, p=1, weights=distance;, score=0.813 total time=   0.1s
[CV 4/5] END algorithm=kd_tree, n_neighbors=4, p=1, weights=distance;, score=0.817 total time=   0.1s
[CV 5/5] END algorithm=kd_tree, n_neighbors=4, p=1, weights=distance;, score=0.815 total time=   0.1s
[CV 1/5] END algorithm=kd_tree, n_neighbors=4, p=2, weights=uniform;, score=0.816 total time=   0.1s
[CV 2/5] END algorithm=kd_tree, n_neighbors=4, p=2, weights=uniform;, score=0.819 total time=   0.1s
[CV 3/5] END algorithm=kd_tree, n_neighbors=4, p=2, weights=uniform;, score=0.824 total time=   0.1s
[CV 4/5] END algorithm=kd_tree, n_neighbors=4, p=2, weights=uniform;, score=0.815 total time=   0.1s
[CV 5/5] END algorithm=kd_tree, n_neighbors=4, p=2, weights=uniform;, score=0.812 total time=   0.1s
[CV 1/5] END algorithm=kd_tree, n_neighbors=4, p=2, weights=distance;, score=0.808 total time=   0.1s
[CV 2/5] END algorithm=kd_tree, n_neighbors=4, p=2, weights=distance;, score=0.809 total time=   0.1s
[CV 3/5] END algorithm=kd_tree, n_neighbors=4, p=2, weights=distance;, score=0.823 total time=   0.1s
[CV 4/5] END algorithm=kd_tree, n_neighbors=4, p=2, weights=distance;, score=0.817 total time=   0.1s
[CV 5/5] END algorithm=kd_tree, n_neighbors=4, p=2, weights=distance;, score=0.808 total time=   0.1s
[CV 1/5] END algorithm=kd_tree, n_neighbors=5, p=1, weights=uniform;, score=0.816 total time=   0.1s
[CV 2/5] END algorithm=kd_tree, n_neighbors=5, p=1, weights=uniform;, score=0.831 total time=   0.1s
[CV 3/5] END algorithm=kd_tree, n_neighbors=5, p=1, weights=uniform;, score=0.827 total time=   0.1s
[CV 4/5] END algorithm=kd_tree, n_neighbors=5, p=1, weights=uniform;, score=0.819 total time=   0.1s
[CV 5/5] END algorithm=kd_tree, n_neighbors=5, p=1, weights=uniform;, score=0.821 total time=   0.1s
[CV 1/5] END algorithm=kd_tree, n_neighbors=5, p=1, weights=distance;, score=0.817 total time=   0.1s
[CV 2/5] END algorithm=kd_tree, n_neighbors=5, p=1, weights=distance;, score=0.831 total time=   0.1s
[CV 3/5] END algorithm=kd_tree, n_neighbors=5, p=1, weights=distance;, score=0.824 total time=   0.1s
[CV 4/5] END algorithm=kd_tree, n_neighbors=5, p=1, weights=distance;, score=0.824 total time=   0.1s
[CV 5/5] END algorithm=kd_tree, n_neighbors=5, p=1, weights=distance;, score=0.822 total time=   0.1s
[CV 1/5] END algorithm=kd_tree, n_neighbors=5, p=2, weights=uniform;, score=0.810 total time=   0.1s
[CV 2/5] END algorithm=kd_tree, n_neighbors=5, p=2, weights=uniform;, score=0.817 total time=   0.1s
[CV 3/5] END algorithm=kd_tree, n_neighbors=5, p=2, weights=uniform;, score=0.824 total time=   0.1s
[CV 4/5] END algorithm=kd_tree, n_neighbors=5, p=2, weights=uniform;, score=0.818 total time=   0.1s
[CV 5/5] END algorithm=kd_tree, n_neighbors=5, p=2, weights=uniform;, score=0.811 total time=   0.1s
[CV 1/5] END algorithm=kd_tree, n_neighbors=5, p=2, weights=distance;, score=0.811 total time=   0.1s
[CV 2/5] END algorithm=kd_tree, n_neighbors=5, p=2, weights=distance;, score=0.816 total time=   0.1s
[CV 3/5] END algorithm=kd_tree, n_neighbors=5, p=2, weights=distance;, score=0.822 total time=   0.1s
[CV 4/5] END algorithm=kd_tree, n_neighbors=5, p=2, weights=distance;, score=0.821 total time=   0.1s
[CV 5/5] END algorithm=kd_tree, n_neighbors=5, p=2, weights=distance;, score=0.807 total time=   0.1s
[CV 1/5] END algorithm=brute, n_neighbors=1, p=1, weights=uniform;, score=0.793 total time=   0.1s
[CV 2/5] END algorithm=brute, n_neighbors=1, p=1, weights=uniform;, score=0.794 total time=   0.1s
[CV 3/5] END algorithm=brute, n_neighbors=1, p=1, weights=uniform;, score=0.794 total time=   0.1s
[CV 4/5] END algorithm=brute, n_neighbors=1, p=1, weights=uniform;, score=0.778 total time=   0.1s
[CV 5/5] END algorithm=brute, n_neighbors=1, p=1, weights=uniform;, score=0.794 total time=   0.1s
[CV 1/5] END algorithm=brute, n_neighbors=1, p=1, weights=distance;, score=0.793 total time=   0.1s
[CV 2/5] END algorithm=brute, n_neighbors=1, p=1, weights=distance;, score=0.794 total time=   0.1s
[CV 3/5] END algorithm=brute, n_neighbors=1, p=1, weights=distance;, score=0.794 total time=   0.1s
[CV 4/5] END algorithm=brute, n_neighbors=1, p=1, weights=distance;, score=0.778 total time=   0.1s
[CV 5/5] END algorithm=brute, n_neighbors=1, p=1, weights=distance;, score=0.794 total time=   0.1s
[CV 1/5] END algorithm=brute, n_neighbors=1, p=2, weights=uniform;, score=0.789 total time=   0.1s
[CV 2/5] END algorithm=brute, n_neighbors=1, p=2, weights=uniform;, score=0.776 total time=   0.1s
[CV 3/5] END algorithm=brute, n_neighbors=1, p=2, weights=uniform;, score=0.786 total time=   0.1s
[CV 4/5] END algorithm=brute, n_neighbors=1, p=2, weights=uniform;, score=0.787 total time=   0.1s
[CV 5/5] END algorithm=brute, n_neighbors=1, p=2, weights=uniform;, score=0.794 total time=   0.1s
[CV 1/5] END algorithm=brute, n_neighbors=1, p=2, weights=distance;, score=0.789 total time=   0.0s
[CV 2/5] END algorithm=brute, n_neighbors=1, p=2, weights=distance;, score=0.776 total time=   0.0s
[CV 3/5] END algorithm=brute, n_neighbors=1, p=2, weights=distance;, score=0.786 total time=   0.0s
[CV 4/5] END algorithm=brute, n_neighbors=1, p=2, weights=distance;, score=0.787 total time=   0.0s
[CV 5/5] END algorithm=brute, n_neighbors=1, p=2, weights=distance;, score=0.794 total time=   0.0s
[CV 1/5] END algorithm=brute, n_neighbors=2, p=1, weights=uniform;, score=0.815 total time=   0.1s
[CV 2/5] END algorithm=brute, n_neighbors=2, p=1, weights=uniform;, score=0.813 total time=   0.1s
[CV 3/5] END algorithm=brute, n_neighbors=2, p=1, weights=uniform;, score=0.820 total time=   0.1s
[CV 4/5] END algorithm=brute, n_neighbors=2, p=1, weights=uniform;, score=0.811 total time=   0.1s
[CV 5/5] END algorithm=brute, n_neighbors=2, p=1, weights=uniform;, score=0.819 total time=   0.1s
[CV 1/5] END algorithm=brute, n_neighbors=2, p=1, weights=distance;, score=0.793 total time=   0.1s
[CV 2/5] END algorithm=brute, n_neighbors=2, p=1, weights=distance;, score=0.794 total time=   0.1s
[CV 3/5] END algorithm=brute, n_neighbors=2, p=1, weights=distance;, score=0.794 total time=   0.1s
[CV 4/5] END algorithm=brute, n_neighbors=2, p=1, weights=distance;, score=0.778 total time=   0.1s
[CV 5/5] END algorithm=brute, n_neighbors=2, p=1, weights=distance;, score=0.794 total time=   0.1s
[CV 1/5] END algorithm=brute, n_neighbors=2, p=2, weights=uniform;, score=0.814 total time=   0.1s
[CV 2/5] END algorithm=brute, n_neighbors=2, p=2, weights=uniform;, score=0.818 total time=   0.1s
[CV 3/5] END algorithm=brute, n_neighbors=2, p=2, weights=uniform;, score=0.819 total time=   0.1s
[CV 4/5] END algorithm=brute, n_neighbors=2, p=2, weights=uniform;, score=0.811 total time=   0.1s
[CV 5/5] END algorithm=brute, n_neighbors=2, p=2, weights=uniform;, score=0.811 total time=   0.1s
[CV 1/5] END algorithm=brute, n_neighbors=2, p=2, weights=distance;, score=0.789 total time=   0.0s
[CV 2/5] END algorithm=brute, n_neighbors=2, p=2, weights=distance;, score=0.776 total time=   0.0s
[CV 3/5] END algorithm=brute, n_neighbors=2, p=2, weights=distance;, score=0.786 total time=   0.0s
[CV 4/5] END algorithm=brute, n_neighbors=2, p=2, weights=distance;, score=0.787 total time=   0.0s
[CV 5/5] END algorithm=brute, n_neighbors=2, p=2, weights=distance;, score=0.794 total time=   0.0s
[CV 1/5] END algorithm=brute, n_neighbors=3, p=1, weights=uniform;, score=0.814 total time=   0.1s
[CV 2/5] END algorithm=brute, n_neighbors=3, p=1, weights=uniform;, score=0.817 total time=   0.1s
[CV 3/5] END algorithm=brute, n_neighbors=3, p=1, weights=uniform;, score=0.818 total time=   0.1s
[CV 4/5] END algorithm=brute, n_neighbors=3, p=1, weights=uniform;, score=0.821 total time=   0.1s
[CV 5/5] END algorithm=brute, n_neighbors=3, p=1, weights=uniform;, score=0.819 total time=   0.1s
[CV 1/5] END algorithm=brute, n_neighbors=3, p=1, weights=distance;, score=0.809 total time=   0.1s
[CV 2/5] END algorithm=brute, n_neighbors=3, p=1, weights=distance;, score=0.816 total time=   0.1s
[CV 3/5] END algorithm=brute, n_neighbors=3, p=1, weights=distance;, score=0.814 total time=   0.1s
[CV 4/5] END algorithm=brute, n_neighbors=3, p=1, weights=distance;, score=0.819 total time=   0.1s
[CV 5/5] END algorithm=brute, n_neighbors=3, p=1, weights=distance;, score=0.814 total time=   0.1s
[CV 1/5] END algorithm=brute, n_neighbors=3, p=2, weights=uniform;, score=0.806 total time=   0.1s
[CV 2/5] END algorithm=brute, n_neighbors=3, p=2, weights=uniform;, score=0.812 total time=   0.1s
[CV 3/5] END algorithm=brute, n_neighbors=3, p=2, weights=uniform;, score=0.814 total time=   0.1s
[CV 4/5] END algorithm=brute, n_neighbors=3, p=2, weights=uniform;, score=0.819 total time=   0.1s
[CV 5/5] END algorithm=brute, n_neighbors=3, p=2, weights=uniform;, score=0.812 total time=   0.1s
[CV 1/5] END algorithm=brute, n_neighbors=3, p=2, weights=distance;, score=0.802 total time=   0.0s
[CV 2/5] END algorithm=brute, n_neighbors=3, p=2, weights=distance;, score=0.812 total time=   0.0s
[CV 3/5] END algorithm=brute, n_neighbors=3, p=2, weights=distance;, score=0.812 total time=   0.0s
[CV 4/5] END algorithm=brute, n_neighbors=3, p=2, weights=distance;, score=0.818 total time=   0.0s
[CV 5/5] END algorithm=brute, n_neighbors=3, p=2, weights=distance;, score=0.809 total time=   0.0s
[CV 1/5] END algorithm=brute, n_neighbors=4, p=1, weights=uniform;, score=0.818 total time=   0.1s
[CV 2/5] END algorithm=brute, n_neighbors=4, p=1, weights=uniform;, score=0.820 total time=   0.1s
[CV 3/5] END algorithm=brute, n_neighbors=4, p=1, weights=uniform;, score=0.819 total time=   0.1s
[CV 4/5] END algorithm=brute, n_neighbors=4, p=1, weights=uniform;, score=0.818 total time=   0.1s
[CV 5/5] END algorithm=brute, n_neighbors=4, p=1, weights=uniform;, score=0.818 total time=   0.1s
[CV 1/5] END algorithm=brute, n_neighbors=4, p=1, weights=distance;, score=0.817 total time=   0.1s
[CV 2/5] END algorithm=brute, n_neighbors=4, p=1, weights=distance;, score=0.823 total time=   0.1s
[CV 3/5] END algorithm=brute, n_neighbors=4, p=1, weights=distance;, score=0.813 total time=   0.1s
[CV 4/5] END algorithm=brute, n_neighbors=4, p=1, weights=distance;, score=0.817 total time=   0.1s
[CV 5/5] END algorithm=brute, n_neighbors=4, p=1, weights=distance;, score=0.815 total time=   0.1s
[CV 1/5] END algorithm=brute, n_neighbors=4, p=2, weights=uniform;, score=0.816 total time=   0.1s
[CV 2/5] END algorithm=brute, n_neighbors=4, p=2, weights=uniform;, score=0.819 total time=   0.1s
[CV 3/5] END algorithm=brute, n_neighbors=4, p=2, weights=uniform;, score=0.824 total time=   0.1s
[CV 4/5] END algorithm=brute, n_neighbors=4, p=2, weights=uniform;, score=0.815 total time=   0.1s
[CV 5/5] END algorithm=brute, n_neighbors=4, p=2, weights=uniform;, score=0.812 total time=   0.1s
[CV 1/5] END algorithm=brute, n_neighbors=4, p=2, weights=distance;, score=0.808 total time=   0.0s
[CV 2/5] END algorithm=brute, n_neighbors=4, p=2, weights=distance;, score=0.809 total time=   0.0s
[CV 3/5] END algorithm=brute, n_neighbors=4, p=2, weights=distance;, score=0.823 total time=   0.0s
[CV 4/5] END algorithm=brute, n_neighbors=4, p=2, weights=distance;, score=0.817 total time=   0.0s
[CV 5/5] END algorithm=brute, n_neighbors=4, p=2, weights=distance;, score=0.808 total time=   0.0s
[CV 1/5] END algorithm=brute, n_neighbors=5, p=1, weights=uniform;, score=0.816 total time=   0.1s
[CV 2/5] END algorithm=brute, n_neighbors=5, p=1, weights=uniform;, score=0.831 total time=   0.1s
[CV 3/5] END algorithm=brute, n_neighbors=5, p=1, weights=uniform;, score=0.827 total time=   0.1s
[CV 4/5] END algorithm=brute, n_neighbors=5, p=1, weights=uniform;, score=0.819 total time=   0.1s
[CV 5/5] END algorithm=brute, n_neighbors=5, p=1, weights=uniform;, score=0.821 total time=   0.1s
[CV 1/5] END algorithm=brute, n_neighbors=5, p=1, weights=distance;, score=0.817 total time=   0.1s
[CV 2/5] END algorithm=brute, n_neighbors=5, p=1, weights=distance;, score=0.831 total time=   0.1s
[CV 3/5] END algorithm=brute, n_neighbors=5, p=1, weights=distance;, score=0.824 total time=   0.1s
[CV 4/5] END algorithm=brute, n_neighbors=5, p=1, weights=distance;, score=0.824 total time=   0.1s
[CV 5/5] END algorithm=brute, n_neighbors=5, p=1, weights=distance;, score=0.822 total time=   0.1s
[CV 1/5] END algorithm=brute, n_neighbors=5, p=2, weights=uniform;, score=0.810 total time=   0.1s
[CV 2/5] END algorithm=brute, n_neighbors=5, p=2, weights=uniform;, score=0.817 total time=   0.1s
[CV 3/5] END algorithm=brute, n_neighbors=5, p=2, weights=uniform;, score=0.824 total time=   0.1s
[CV 4/5] END algorithm=brute, n_neighbors=5, p=2, weights=uniform;, score=0.818 total time=   0.1s
[CV 5/5] END algorithm=brute, n_neighbors=5, p=2, weights=uniform;, score=0.811 total time=   0.1s
[CV 1/5] END algorithm=brute, n_neighbors=5, p=2, weights=distance;, score=0.811 total time=   0.0s
[CV 2/5] END algorithm=brute, n_neighbors=5, p=2, weights=distance;, score=0.816 total time=   0.0s
[CV 3/5] END algorithm=brute, n_neighbors=5, p=2, weights=distance;, score=0.822 total time=   0.0s
[CV 4/5] END algorithm=brute, n_neighbors=5, p=2, weights=distance;, score=0.821 total time=   0.0s
[CV 5/5] END algorithm=brute, n_neighbors=5, p=2, weights=distance;, score=0.807 total time=   0.0s
hyperparameter tuning for KNN:

Best score of model:
0.8234999999999999 

Best params of model:
{'algorithm': 'auto', 'n_neighbors': 5, 'p': 1, 'weights': 'distance'} 

Best estimator of model:
KNeighborsClassifier(p=1, weights='distance') 

hyperparameter tuning for Random Forest:

Best score of model:
0.8603750000000001 

Best params of model:
{'max_depth': 6, 'max_features': 6} 

Best estimator of model:
RandomForestClassifier(max_depth=6, max_features=6) 

hyperparameter tuning for XGB:

Best score of model:
0.8630000000000001 

Best params of model:
{'gamma': 0.001, 'learning_rate': 0.1, 'max_depth': 5, 'min_child_weight': 1} 

Best estimator of model:
XGBClassifier(base_score=0.5, booster='gbtree', callbacks=None,
              colsample_bylevel=1, colsample_bynode=1, colsample_bytree=1,
              early_stopping_rounds=None, enable_categorical=False,
              eval_metric=None, gamma=0.001, gpu_id=-1, grow_policy='depthwise',
              importance_type=None, interaction_constraints='',
              learning_rate=0.1, max_bin=256, max_cat_to_onehot=4,
              max_delta_step=0, max_depth=5, max_leaves=0, min_child_weight=1,
              missing=nan, monotone_constraints='()', n_estimators=100,
              n_jobs=0, num_parallel_tree=1, predictor='auto', random_state=0,
              reg_alpha=0, reg_lambda=1, ...) 

Fit Decision Tree Classifier Standard With max_depth:8:

Example of CV using KFOLD applied to RandomForestClassifier (instead of using best_model function):
 
Stratified cross-validation scores with max features 6 and n_estimator 50: [0.86767892 0.850663   0.85807125 0.87341168 0.85541236]
Stratified cross-validation scores mean: 0.8610474427213225
Classification Reports of all models in training phase:

              precision    recall  f1-score   support

           0       0.83      0.97      0.89      6353
           1       0.64      0.24      0.35      1647

    accuracy                           0.82      8000
   macro avg       0.73      0.60      0.62      8000
weighted avg       0.79      0.82      0.78      8000

              precision    recall  f1-score   support

           0       0.86      0.98      0.92      6353
           1       0.85      0.40      0.54      1647

    accuracy                           0.86      8000
   macro avg       0.86      0.69      0.73      8000
weighted avg       0.86      0.86      0.84      8000

              precision    recall  f1-score   support

           0       0.89      0.97      0.93      6353
           1       0.81      0.55      0.65      1647

    accuracy                           0.88      8000
   macro avg       0.85      0.76      0.79      8000
weighted avg       0.87      0.88      0.87      8000

              precision    recall  f1-score   support

           0       0.88      0.97      0.92      6353
           1       0.79      0.48      0.60      1647

    accuracy                           0.87      8000
   macro avg       0.83      0.72      0.76      8000
weighted avg       0.86      0.87      0.85      8000

              precision    recall  f1-score   support

           0       0.89      0.98      0.93      6353
           1       0.88      0.52      0.65      1647

    accuracy                           0.89      8000
   macro avg       0.88      0.75      0.79      8000
weighted avg       0.89      0.89      0.87      8000

              precision    recall  f1-score   support

           0       0.89      0.97      0.93      6353
           1       0.83      0.53      0.64      1647

    accuracy                           0.88      8000
   macro avg       0.86      0.75      0.79      8000
weighted avg       0.88      0.88      0.87      8000

(1996, 17)
